ingress-nginx:
  controller:
    replicaCount: 3
    service:
      type: NodePort
      nodePorts:
        http: 30800
        https: 30044
        tcp:
          3306: 30306
          3307: 30307
    ingressClass: demo
    ingressClassResource:
      enabled: true
      name: demo
      controllerValue: k8s.io/demo

  tcp: 
    3306: "demo/demo-mysql-primary-headless:3306"
    3307: "demo/demo-mysql-secondary:3306"
    
mysql:
  # https://ithelp.ithome.com.tw/articles/10336421
    # custom-mysql-values.yaml
  volumePermissions:
    enabled: true
  # @param global.storageClass Global StorageClass for Persistent Volume(s)
  global:
    storageClass: "demo-mysql"

  # @param architecture MySQL architecture (`standalone` or `replication`)
  architecture: replication

  auth:
    rootPassword: "test1234"
    createDatabase: true
    database: "demo"
    
    # @param auth.username Name for a custom user to create
    username: "admin"
    # @param auth.password Password for the new user. Ignored if existing secret is provided
    password: "admin"
    
    # @param auth.replicationUser MySQL replication user
    replicationUser: replicator
    # @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
    replicationPassword: "replicationtest"

  primary:
    name: primary
    persistence:
      enabled: true
      # @param primary.persistence.storageClass MySQL primary persistent volume storage Class
      # If defined, storageClassName: <storageClass>
      # If set to "-", storageClassName: "", which disables dynamic provisioning
      # If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner.  (gp2 on AWS, standard on GKE, AWS & OpenStack)
      storageClass: "demo-mysql"
      labels:
        app: mysql
      accessModes:
        - ReadWriteOnce
      size: 8Gi
      persistentVolumeReclaimPolicy:
        enabled: true
      selector:
        matchLabels:
          app: data-demo-mysql-primary-0

  secondary:
    name: secondary
    replicaCount: 2
    persistence:
      enabled: true
      # @param secondary.persistence.storageClass MySQL secondary persistent volume storage Class
      # If defined, storageClassName: <storageClass>
      # If set to "-", storageClassName: "", which disables dynamic provisioning
      # If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner.  (gp2 on AWS, standard on GKE, AWS & OpenStack)
      storageClass: "demo-mysql"
      persistentVolumeReclaimPolicy:
        enabled: true
      selector:
        matchLabels:
          app: data-demo-mysql-secondary